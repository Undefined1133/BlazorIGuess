@page "/ChartsAdultInfo"
@using Syncfusion.Blazor.HeatMap.Internal
@using BlazorAssignment.Models
@using BlazorAssignment.Data
@using System.Linq
<SfChart Title="Age difference Chart">
    <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category" Title="FirstName">
    </ChartPrimaryXAxis>
    <ChartPrimaryYAxis Title="Age">
    </ChartPrimaryYAxis>
    <ChartLegendSettings Visible="true"></ChartLegendSettings>
    <ChartTooltipSettings Enable="true"></ChartTooltipSettings>
    <ChartSeriesCollection>
        <ChartSeries Type="ChartSeriesType.Column" DataSource="@_adultList"
                     XName="FirstName" YName="Age" Name="AgeChart">
            <ChartMarker>
                <ChartDataLabel Visible="true"></ChartDataLabel>
            </ChartMarker>
        </ChartSeries>
    </ChartSeriesCollection>
</SfChart>
@if (_uniqueColors == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <div class="row">
        <div class="col-md-6">


            <RadzenChart>
                <RadzenPieSeries Data="@_uniqueColors" Title="TotalAdultsWithThisColor" CategoryProperty="color"
                                 ValueProperty="numberOfColors">

                </RadzenPieSeries>
            </RadzenChart>
        </div>
    </div>
}

@code
{

    private IList<Adult> _adultList;
    private AdultsService _adultsService;
    private List<Adult> _adultListForPieChart;
    
    private List<UniqueColors> _uniqueColors;

    protected override async Task OnInitializedAsync()
    {
        _adultsService = new AdultsService();

        _adultList = _adultsService.ReadData<Adult>(); //   "adults.json"

        _uniqueColors = new List<UniqueColors>();
       


        gettingAllUniqueColors();
    }

    public void gettingAllUniqueColors()
    {

        foreach (var adult in _adultList)
        {
            if (!_uniqueColors.Any(u => u.color == adult.GetEyeColor()))
            {
                _uniqueColors.Add(new UniqueColors { color = adult.GetEyeColor(), numberOfColors = 0 });
            }
        }

        foreach (var unique in _uniqueColors)
        {
            int counter = 0;

            foreach(var adults in _adultList)
            {
                if (adults.GetEyeColor() == unique.getUniqueColor())
                    counter++;
            }
            unique.numberOfColors = counter;
        }
    }



    // string currentEyeColor = "";

    // foreach (var adult in _adultList)
    // {
    //     currentEyeColor = adult.GetEyeColor();
    //    
    //    bool flag = true;
    //   int currentEyeColorNumber = 0;
    //   foreach (var unique in _uniqueColors)
    //   {
    //       if (currentEyeColor == unique.getUniqueColor())
    //      {
    //          flag = false;
    //          currentEyeColorNumber++;
    // //     }
    //  }
    //  if (flag == true)
    //  {
    //       _uniqueColors.Add(new UniqueColors(currentEyeColor,currentEyeColorNumber));
    //  }
    // }
    

        }
    }
}
